on:
  push:
    tags:
      - gping-v*
    branches:
      - master
  pull_request:

name: CI

jobs:
  build_and_test:
    name: Rust project
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            bin: gping
            name: gping-Linux-x86_64.tar.gz
            container: quay.io/pypa/manylinux_2_28_x86_64
          - os: macOS-latest
            bin: gping
            name: gping-Darwin-x86_64.tar.gz
            container: null
          - os: windows-latest
            bin: gping.exe
            name: gping-Windows-x86_64.zip
            container: null
    env:
      RUST_BACKTRACE: "1"
    steps:
      - uses: actions/checkout@master
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Caching:
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: Run
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: -- --help

      - name: Build release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - name: Package
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          strip target/release/${{ matrix.bin }}
          cd target/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]
          then
          7z a ../../${{ matrix.name }} ${{ matrix.bin }}
          else
          tar czvf ../../${{ matrix.name }} ${{ matrix.bin }}
          fi
          cd -
      - name: Publish
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: false
          files: 'gping*'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  cross_builds:
    name: Cross-build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - armv7-linux-androideabi
          - armv7-unknown-linux-gnueabihf
          - armv7-unknown-linux-musleabihf
          - aarch64-linux-android
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - x86_64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: check
          args: --target ${{ matrix.target }}
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: test
          args: --target ${{ matrix.target }}
      - uses: actions-rs/cargo@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          use-cross: true
          command: build
          args: --target ${{ matrix.target }} --release
      - name: Package
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release/
          tar czvf ../../../gping-${{ matrix.target }}.tar.gz gping
          cd -
      - name: Publish
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: false
          files: 'gping*'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v1

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v1

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: clippy

      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v1

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
